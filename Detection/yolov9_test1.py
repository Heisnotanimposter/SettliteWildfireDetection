# -*- coding: utf-8 -*-
"""yolov9_test1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/Heisnotanimposter/SettliteWildfireDetection/blob/main/Detection/yolov9_test1.ipynb

#import roboflow datasets
"""

!pip install YOLOv9

!apt install git

!git clone https://github.com/WongKinYiu/yolov9.git

!pip install -r ./yolov9/requirements.txt

#import yaml
import yaml
import requests
from glob import glob

import os
import shutil
from sklearn.model_selection import train_test_split

# Mount your Google Drive
from google.colab import drive
drive.mount('/content/drive')

# Folder Paths
base_path = '/content/drive/MyDrive/dataset'
run_folder_path = os.path.join(base_path, 'run')
yolov9_source = '/content/yolov9'
yolov9_destination = os.path.join(run_folder_path, 'yolov9')

# Create the 'run' folder if it doesn't exist
try:
  os.makedirs(run_folder_path)
  print("Directory 'run' created successfully")
except FileExistsError:
  print("Directory 'run' already exists")

# Move the 'yolov9' folder
try:
  shutil.move(yolov9_source, yolov9_destination)
  print("Moved 'yolov9' to '/content/drive/MyDrive/dataset/run'")
except FileNotFoundError:
  print("Error: 'yolov9' folder not found in '/content/'")

test_dataset = test
image_dir="/content/drive/MyDrive/dataset/test_img",
mask_dir="/content/drive/MyDrive/dataset/train_mask",
split="test"

def train(image_dir, mask_dir):
    # Load image and mask paths
    image_paths = [os.path.join(image_dir, img) for img in os.listdir(image_dir)]
    mask_paths = [os.path.join(mask_dir, mask) for mask in os.listdir(mask_dir)]

    # Assuming images and masks correspond
    data = list(zip(image_paths, mask_paths))

    # Hold-out split (80% train, 20% validation)
    train_data, val_data = train_test_split(data, test_size=0.2, random_state=42)

    return train_data, val_data

def load_test_images(image_dir):
    # Load image paths
    image_paths = [os.path.join(image_dir, img) for img in os.listdir(image_dir)]
    return image_paths

     # Assuming images and masks correspond
    test_data = list(zip(image_paths, mask_paths))
    return test_data

# Example usage
train_data, val_data = train(
    image_dir="/content/drive/MyDrive/dataset/train_img",
    mask_dir="/content/drive/MyDrive/dataset/train_mask"
)

# Example usage for test data
test_images = load_test_images(
    image_dir="/content/drive/MyDrive/dataset/test_img"
)

# Note: The 'test_images' variable will contain paths to test images.
# Since there are no test masks, it will only be used for inference or submission purposes.

def create_training_data_txt(train_data, file_name="/content/drive/MyDrive/dataset/train_data.txt"):
    with open(file_name, "w") as file:
        for img_path, mask_path in train_data:
            file.write(f"{img_path} {mask_path}\n")
    print(f"Training data saved to {file_name}")

# Assuming train_data is a list of tuples with (image_path, mask_path)
create_training_data_txt(train_data)

def create_val_data_txt(val_data, file_name="/content/drive/MyDrive/dataset/val_data.txt"):
    with open(file_name, "w") as file:
        for img_path, mask_path in val_data:
            file.write(f"{img_path} {mask_path}\n")
    print(f"Validation data saved to {file_name}")

# Assuming val_data is a list of tuples with (image_path, mask_path)
create_val_data_txt(val_data)

source_path = '/content/drive/MyDrive/dataset/run/yolov9/requirements.txt'
destination_path = '/content/drive/MyDrive/dataset/requirements.txt'  # Change this to your desired destination

# Copy the file
shutil.copy2(source_path, destination_path)

print(f"File copied to {destination_path}")

yaml_file_path = '/content/drive/MyDrive/dataset/run/yolov9/yolov9/models/detect/yolov9.yaml'
#with open(yaml_file_path, 'r') as f:
#  readyaml = yaml.safe_load(f)

#readyaml

# Define file paths
yaml_file_path = '/content/drive/MyDrive/dataset/config.yaml'
yaml_destination_path = '/content/drive/MyDrive/dataset/data.yaml'  # Updated destination name
hyp_high_path = '/content/drive/MyDrive/dataset/run/yolov9/yolov9/data/hyps/hyp.scratch-high.yaml'
hyp_low_path = '/content/drive/MyDrive/dataset/run/yolov9/yolov9/data/hyps/hyp.scratch-low.yaml'

# Define the new configuration for YOLOv9 as a Python dictionary
new_config = {
    'train': '/content/drive/MyDrive/dataset/train_data.txt',
    'val': '/content/drive/MyDrive/dataset/train_data.txt',
    'nc': 1,
    'names': ['Fire'],
    'depth_multiple': 1.0,
    'width_multiple': 1.0,
    'activation': 'nn.ReLU()',
    'anchors': 3,
    'backbone': [
        [-1, 1, 'Silence', []],
        [-1, 1, 'Conv', [64, 3, 2]],
        [-1, 1, 'Conv', [128, 3, 2]],
        [-1, 1, 'RepNCSPELAN4', [256, 128, 64, 1]],
        [-1, 1, 'Conv', [256, 3, 2]],
        [-1, 1, 'RepNCSPELAN4', [512, 256, 128, 1]],
        [-1, 1, 'Conv', [512, 3, 2]],
        [-1, 1, 'RepNCSPELAN4', [512, 512, 256, 1]],
        [-1, 1, 'Conv', [512, 3, 2]],
        [-1, 1, 'RepNCSPELAN4', [512, 512, 256, 1]],
    ],
    'head': [
        [-1, 1, 'SPPELAN', [512, 256]],
        [-1, 1, 'nn.Upsample', [None, 2, 'nearest']],
        [[-1, 7], 1, 'Concat', [1]],
        [-1, 1, 'RepNCSPELAN4', [512, 512, 256, 1]],
        [-1, 1, 'nn.Upsample', [None, 2, 'nearest']],
        [[-1, 5], 1, 'Concat', [1]],
        [-1, 1, 'RepNCSPELAN4', [256, 256, 128, 1]],

        # Conv-down merge
        [-1, 1, 'Conv', [256, 3, 2]],
        [[-1, 13], 1, 'Concat', [1]],  # cat head P4

        # Elan-2 block
        [-1, 1, 'RepNCSPELAN4', [512, 512, 256, 1]],  # 19 (P4/16-medium)

        # Conv-down merge
        [-1, 1, 'Conv', [512, 3, 2]],
        [[-1, 10], 1, 'Concat', [1]],  # cat head P5

        # Elan-2 block
        [-1, 1, 'RepNCSPELAN4', [512, 512, 256, 1]],  # 22 (P5/32-large)

        # Routing
        [5, 1, 'CBLinear', [[256]]],  # 23
        [7, 1, 'CBLinear', [[256, 512]]],  # 24
        [9, 1, 'CBLinear', [[256, 512, 512]]],  # 25

        # Conv down
        [0, 1, 'Conv', [64, 3, 2]],  # 26-P1/2

        # Conv down
        [-1, 1, 'Conv', [128, 3, 2]],  # 27-P2/4

        # Elan-1 block
        [-1, 1, 'RepNCSPELAN4', [256, 128, 64, 1]],  # 28

        # Conv down fuse
        [-1, 1, 'Conv', [256, 3, 2]],  # 29-P3/8
        [[23, 24, 25, -1], 1, 'CBFuse', [[0, 0, 0]]],  # 30

        # Elan-2 block
        [-1, 1, 'RepNCSPELAN4', [512, 256, 128, 1]],  # 31

        # Conv down fuse
        [-1, 1, 'Conv', [512, 3, 2]],  # 32-P4/16
        [[24, 25, -1], 1, 'CBFuse', [[1, 1]]], # 33

        # Elan-2 block
        [-1, 1, 'RepNCSPELAN4', [512, 512, 256, 1]],  # 34

        # Conv down fuse
        [-1, 1, 'Conv', [512, 3, 2]],  # 35-P5/32
        [[25, -1], 1, 'CBFuse', [[2]]], # 36

        # Elan-2 block
        [-1, 1, 'RepNCSPELAN4', [512, 512, 256, 1]],  # 37

        # Detect
        [[31, 34, 37, 16, 19, 22], 1, 'DualDDetect', ['nc']],  # DualDDetect(A3, A4, A5, P3, P4, P5)
     ]
  }

# Write the new configuration to the original YAML file
with open(yaml_file_path, 'w') as file:
    yaml.dump(new_config, file)
print(f"Updated YAML configuration has been written to {yaml_file_path}")

# Rename (effectively moving/renaming) config.yaml to data.yaml
if os.path.exists(yaml_file_path):
    os.rename(yaml_file_path, yaml_destination_path)
    print(f"'config.yaml' has been renamed to 'data.yaml' at {yaml_destination_path}")
else:
    print(f"File does not exist: {yaml_file_path}")

# Copy hyp.scratch-high.yaml to hyp.scratch-low.yaml
if os.path.exists(hyp_high_path):
    shutil.copy2(hyp_high_path, hyp_low_path)
    print(f"File copied from {hyp_high_path} to {hyp_low_path}")
else:
    print(f"Source file does not exist: {hyp_high_path}")

# Define the source and destination file paths
source_path = '/content/drive/MyDrive/dataset/run/yolov9/yolov9/data/hyps/hyp.scratch-high.yaml'
destination_path = '/content/drive/MyDrive/dataset/run/yolov9/yolov9/data/hyps/hyp.scratch-low.yaml'

# Copy the file
shutil.copy2(source_path, destination_path)

print(f"File copied from {source_path} to {destination_path}")

# URL of the pre-trained weights
url = "https://github.com/WongKinYiu/yolov9/releases/download/v0.1/yolov9-c-converted.pt"

# Path to save the weights in Google Drive
save_path = "/content/drive/MyDrive/dataset/yolov9-c-converted.pt"

# Downloading the file
response = requests.get(url)
response.raise_for_status()  # Check if the download was successful

# Writing the downloaded weights to a file
with open(save_path, "wb") as f:
    f.write(response.content)

print(f"Pre-trained weights downloaded and saved to {save_path}")

!python /content/drive/MyDrive/dataset/run/yolov9/yolov9/train.py --img 256 --batch 16 --epochs 50 --data /content/drive/MyDrive/dataset/data.yaml --cfg /content/drive/MyDrive/dataset/run/yolov9/models/detect/yolov9.yaml --weights /content/drive/MyDrive/dataset/yolov9-c-converted.pt --name yolov9_c_c_640_val

